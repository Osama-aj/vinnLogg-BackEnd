// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using basement.database;

namespace basement.database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("basement.core.Entities.GeneralSection.Country", b =>
                {
                    b.Property<long>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("VARCHAR")
                        .HasMaxLength(40);

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("basement.core.Entities.GeneralSection.District", b =>
                {
                    b.Property<long>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("DistrictName")
                        .IsRequired()
                        .HasColumnType("VARCHAR")
                        .HasMaxLength(40);

                    b.Property<long>("RegionId")
                        .HasColumnType("bigint");

                    b.HasKey("DistrictId");

                    b.HasIndex("RegionId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("basement.core.Entities.GeneralSection.Grape", b =>
                {
                    b.Property<long>("GrapeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("GrapeName")
                        .IsRequired()
                        .HasColumnType("VARCHAR")
                        .HasMaxLength(40);

                    b.HasKey("GrapeId");

                    b.ToTable("Grapes");
                });

            modelBuilder.Entity("basement.core.Entities.GeneralSection.Region", b =>
                {
                    b.Property<long>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnType("VARCHAR")
                        .HasMaxLength(40);

                    b.HasKey("RegionId");

                    b.HasIndex("CountryId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("basement.core.Entities.GeneralSection.Vintage", b =>
                {
                    b.Property<long>("VintageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("EAN")
                        .HasColumnType("text");

                    b.Property<long>("WineId")
                        .HasColumnType("bigint");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("VintageId");

                    b.HasIndex("WineId");

                    b.ToTable("Vintages");
                });

            modelBuilder.Entity("basement.core.Entities.GeneralSection.Wine", b =>
                {
                    b.Property<long>("WineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("Alcohol")
                        .HasColumnType("double precision");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Producer")
                        .HasColumnType("text");

                    b.HasKey("WineId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Wines");
                });

            modelBuilder.Entity("basement.core.Entities.GeneralSection.WineGrape", b =>
                {
                    b.Property<long>("WineId")
                        .HasColumnType("bigint");

                    b.Property<long>("GrapeId")
                        .HasColumnType("bigint");

                    b.Property<double>("Percent")
                        .HasColumnType("double precision");

                    b.HasKey("WineId", "GrapeId");

                    b.HasIndex("GrapeId");

                    b.ToTable("WineGrapes");
                });

            modelBuilder.Entity("basement.core.Entities.UserSection.GradeTable", b =>
                {
                    b.Property<long>("GradeTableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("VARCHAR")
                        .HasMaxLength(250);

                    b.Property<int>("Grade")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("VintageId")
                        .HasColumnType("bigint");

                    b.HasKey("GradeTableId");

                    b.HasIndex("VintageId")
                        .IsUnique();

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("basement.core.Entities.UserSection.Inventory", b =>
                {
                    b.Property<long>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("integer")
                        .HasMaxLength(1);

                    b.Property<long>("ShelfId")
                        .HasColumnType("bigint");

                    b.Property<long>("VintageId")
                        .HasColumnType("bigint");

                    b.HasKey("InventoryId");

                    b.HasIndex("ShelfId");

                    b.HasIndex("VintageId");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("basement.core.Entities.UserSection.Shelf", b =>
                {
                    b.Property<long>("ShelfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ShelfName")
                        .IsRequired()
                        .HasColumnType("character varying(18)")
                        .HasMaxLength(18);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ShelfId");

                    b.ToTable("Shelves");
                });

            modelBuilder.Entity("basement.core.Entities.UserSection.User", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("VARCHAR")
                        .HasMaxLength(48);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("VARCHAR")
                        .HasMaxLength(30);

                    b.HasKey("UserId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("basement.core.Entities.GeneralSection.District", b =>
                {
                    b.HasOne("basement.core.Entities.GeneralSection.Region", "Region")
                        .WithMany("Districts")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("basement.core.Entities.GeneralSection.Region", b =>
                {
                    b.HasOne("basement.core.Entities.GeneralSection.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("basement.core.Entities.GeneralSection.Vintage", b =>
                {
                    b.HasOne("basement.core.Entities.GeneralSection.Wine", "Wine")
                        .WithMany("Vintages")
                        .HasForeignKey("WineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("basement.core.Entities.GeneralSection.Wine", b =>
                {
                    b.HasOne("basement.core.Entities.GeneralSection.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("basement.core.Entities.GeneralSection.WineGrape", b =>
                {
                    b.HasOne("basement.core.Entities.GeneralSection.Grape", "Grape")
                        .WithMany("WineGrapes")
                        .HasForeignKey("GrapeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("basement.core.Entities.GeneralSection.Wine", "Wine")
                        .WithMany("WineGrapes")
                        .HasForeignKey("WineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("basement.core.Entities.UserSection.GradeTable", b =>
                {
                    b.HasOne("basement.core.Entities.GeneralSection.Vintage", null)
                        .WithOne("Grade")
                        .HasForeignKey("basement.core.Entities.UserSection.GradeTable", "VintageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("basement.core.Entities.UserSection.Inventory", b =>
                {
                    b.HasOne("basement.core.Entities.UserSection.Shelf", "Shelf")
                        .WithMany()
                        .HasForeignKey("ShelfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("basement.core.Entities.GeneralSection.Vintage", "Vintage")
                        .WithMany()
                        .HasForeignKey("VintageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
